<?php

/**
 * @file
 * Module file.
 */

/**
 * Implements hook_theme().
 */
function un_date_theme($existing, $type, $theme, $path) {
  return [
    'un_date_date' => [
      'variables' => [
        'start' => NULL,
        'iso_start_date' => NULL,
        'start_date' => NULL,
      ],
    ],
    'un_date_datetime' => [
      'variables' => [
        'start' => NULL,
        'iso_start_date' => NULL,
        'start_date' => NULL,
        'start_time' => NULL,
        'timezone' => NULL,
        'display_timezone' => NULL,
      ],
    ],
    'un_date_datetime_range' => [
      'variables' => [
        'start' => NULL,
        'end' => NULL,
        'daterange' => NULL,
        'iso_start_date' => NULL,
        'iso_end_date' => NULL,
        'start_date' => NULL,
        'start_time' => NULL,
        'end_date' => NULL,
        'end_time' => NULL,
        'timezone' => NULL,
        'display_timezone' => NULL,
        'same_date' => NULL,
        'same_day' => NULL,
        'all_day' => NULL,
      ],
    ],
    'un_date_date_range' => [
      'variables' => [
        'start' => NULL,
        'end' => NULL,
        'daterange' => NULL,
        'iso_start_date' => NULL,
        'iso_end_date' => NULL,
        'start_date' => NULL,
        'end_date' => NULL,
        'same_date' => NULL,
        'same_day' => NULL,
        'all_day' => NULL,
      ],
    ],
    'un_date_date_recur_basic' => [
      'variables' => [
        'start' => NULL,
        'end' => NULL,
        'daterange' => NULL,
        'iso_start_date' => NULL,
        'iso_end_date' => NULL,
        'start_date' => NULL,
        'start_time' => NULL,
        'end_date' => NULL,
        'end_time' => NULL,
        'timezone' => NULL,
        'display_timezone' => NULL,
        'same_date' => NULL,
        'same_day' => NULL,
        'all_day' => NULL,
        'interpretation' => NULL,
        'is_recurring' => FALSE,
        'occurrences' => [],
      ],
    ],
    'un_date_date_block' => [
      'variables' => [
        'start' => NULL,
        'end' => NULL,
        'daterange' => NULL,
        'iso_start_date' => NULL,
        'iso_end_date' => NULL,
        'start_date' => NULL,
        'start_time' => NULL,
        'end_date' => NULL,
        'end_time' => NULL,
        'timezone' => NULL,
        'display_timezone' => NULL,
        'same_date' => NULL,
        'same_day' => NULL,
        'all_day' => NULL,
        'interpretation' => NULL,
        'is_recurring' => FALSE,
        'occurrences' => [],
      ],
    ],
    'un_date_occurence' => [
      'variables' => [
        'start' => NULL,
        'end' => NULL,
        'daterange' => NULL,
        'iso_start_date' => NULL,
        'iso_end_date' => NULL,
        'start_date' => NULL,
        'start_time' => NULL,
        'end_date' => NULL,
        'end_time' => NULL,
        'timezone' => NULL,
        'display_timezone' => NULL,
        'same_date' => NULL,
        'same_day' => NULL,
        'all_day' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function un_date_locale_translation_projects_alter(&$projects) {
  $path = \Drupal::moduleHandler()->getModule('un_date')->getPath();

  $projects['un_date'] = [
    'name' => 'un_date',
    'info' => [
      'name' => 'UN Date',
      'package' => 'Other',
      'version' => 'custom',
      'project' => 'un_date',
      'datestamp' => '0',
      'interface translation server pattern' => $path . '/translations/%language.po',
    ],
    'datestamp' => '0',
    'project_type' => 'module',
    'project_status' => TRUE,
  ];
}

/**
 * Current language.
 */
function un_date_current_language() {
  try {
    return \Drupal::languageManager()->getCurrentLanguage()->getId();
  }
  catch (\Exception $e) {
    return 'en';
  }
}

/**
 * Is current language Rtl.
 */
function un_date_current_language_rtl() {
  return un_date_current_language() == 'ar';
}

/**
 * Get module path.
 */
function un_date_get_module_path() {
  return dirname(__FILE__);
}

/**
 * Format plural wrapper.
 */
function un_date_format_plural($count, $single, $multiple) {
  return \Drupal::translation()->formatPlural($count, $single, $multiple);
}
